import * as __WEBPACK_EXTERNAL_MODULE_react__ from "react";
import * as __WEBPACK_EXTERNAL_MODULE_moment__ from "moment";
const useMonthRangePicker = ({ fromDate, toDate, onFromDateChange, onToDateChange, activeInput, onActiveInputChange })=>{
    const [selectorType, setSelectorType] = (0, __WEBPACK_EXTERNAL_MODULE_react__.useState)('month');
    const [yearRange, setYearRange] = (0, __WEBPACK_EXTERNAL_MODULE_react__.useState)(()=>{
        const currentYear = new Date().getFullYear();
        return [
            currentYear - 6,
            currentYear + 5
        ];
    });
    const formatDisplayDate = (date, type)=>{
        if (!date) return 'from' === type ? "From" : "To";
        return (0, __WEBPACK_EXTERNAL_MODULE_moment__["default"])(date).format('MMM YY');
    };
    const displayFromDate = formatDisplayDate(fromDate, 'from');
    const displayToDate = formatDisplayDate(toDate, 'to');
    const selectedMonthForSelector = 'from' === activeInput ? fromDate || new Date() : toDate || fromDate || new Date();
    const handleMonthSelect = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((monthIndex)=>{
        const currentDate = selectedMonthForSelector;
        const newDate = new Date(currentDate);
        newDate.setMonth(monthIndex);
        newDate.setDate(1);
        if ('from' === activeInput) {
            onFromDateChange(newDate);
            if (toDate && newDate > toDate) onToDateChange(void 0);
            onActiveInputChange('to');
        } else if ('to' === activeInput) {
            if (fromDate && newDate < fromDate) {
                onFromDateChange(new Date(newDate));
                onToDateChange(new Date(newDate));
            } else onToDateChange(newDate);
            onActiveInputChange(null);
        }
    }, [
        activeInput,
        fromDate,
        toDate,
        onFromDateChange,
        onToDateChange,
        onActiveInputChange,
        selectedMonthForSelector
    ]);
    const handleYearSelect = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((year)=>{
        const currentDate = selectedMonthForSelector;
        const newDate = new Date(currentDate);
        newDate.setFullYear(year);
        newDate.setDate(1);
        if ('from' === activeInput) {
            onFromDateChange(newDate);
            if (toDate && newDate > toDate) onToDateChange(void 0);
        } else if ('to' === activeInput) onToDateChange(newDate);
        setSelectorType('month');
    }, [
        activeInput,
        fromDate,
        toDate,
        onFromDateChange,
        onToDateChange,
        selectedMonthForSelector
    ]);
    const handlePreviousYearRange = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)(()=>{
        setYearRange((prev)=>[
                prev[0] - 12,
                prev[1] - 12
            ]);
    }, []);
    const handleNextYearRange = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)(()=>{
        new Date().getFullYear();
        setYearRange((prev)=>[
                prev[0] + 12,
                prev[1] + 12
            ]);
    }, []);
    const handleYearClick = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)(()=>{
        setSelectorType('year');
    }, []);
    const handleSelectedMonthChange = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((date)=>{}, []);
    const handlePopoverOpenChange = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((open)=>{
        if (!open) {
            onActiveInputChange(null);
            setSelectorType('month');
        }
    }, [
        onActiveInputChange
    ]);
    const handleFromButtonClick = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)(()=>{
        onActiveInputChange('from' === activeInput ? null : 'from');
        setSelectorType('month');
    }, [
        onActiveInputChange,
        activeInput
    ]);
    const handleToButtonClick = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)(()=>{
        onActiveInputChange('to' === activeInput ? null : 'to');
        setSelectorType('month');
    }, [
        onActiveInputChange,
        activeInput
    ]);
    return {
        selectorType,
        yearRange,
        displayFromDate,
        displayToDate,
        selectedMonthForSelector,
        handleMonthSelect,
        handleYearSelect,
        handlePreviousYearRange,
        handleNextYearRange,
        handleYearClick,
        handleSelectedMonthChange,
        handlePopoverOpenChange,
        handleFromButtonClick,
        handleToButtonClick
    };
};
export { useMonthRangePicker };
