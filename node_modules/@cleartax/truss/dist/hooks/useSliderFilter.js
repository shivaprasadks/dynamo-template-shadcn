import * as __WEBPACK_EXTERNAL_MODULE_react__ from "react";
const useSliderFilter = ({ min, max, minVal, maxVal, onChange })=>{
    const safeMin = 'number' == typeof min ? min : 0;
    const safeMax = 'number' == typeof max ? max : 100;
    const safeMinVal = 'number' == typeof minVal ? minVal : safeMin;
    const safeMaxVal = 'number' == typeof maxVal ? maxVal : safeMax;
    const isFilterApplied = safeMinVal !== safeMin || safeMaxVal !== safeMax;
    const [values, setValues] = (0, __WEBPACK_EXTERNAL_MODULE_react__.useState)([
        safeMinVal,
        safeMaxVal
    ]);
    const [inputMin, setInputMin] = (0, __WEBPACK_EXTERNAL_MODULE_react__.useState)(String(safeMinVal));
    const [inputMax, setInputMax] = (0, __WEBPACK_EXTERNAL_MODULE_react__.useState)(String(safeMaxVal));
    (0, __WEBPACK_EXTERNAL_MODULE_react__.useEffect)(()=>{
        setValues([
            safeMinVal,
            safeMaxVal
        ]);
        setInputMin(String(safeMinVal));
        setInputMax(String(safeMaxVal));
    }, [
        safeMinVal,
        safeMaxVal,
        safeMin,
        safeMax
    ]);
    const handleSliderChange = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((newValues)=>{
        const [newMin, newMax] = newValues;
        setValues([
            newMin,
            newMax
        ]);
        setInputMin(String(newMin));
        setInputMax(String(newMax));
        onChange(newMin, newMax);
    }, [
        onChange
    ]);
    const handleInputMinChange = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((e)=>{
        const value = e.target.value;
        setInputMin(value);
    }, []);
    const handleInputMaxChange = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((e)=>{
        const value = e.target.value;
        setInputMax(value);
    }, []);
    const handleInputMinBlur = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)(()=>{
        let newMin = Number(inputMin);
        if (isNaN(newMin)) newMin = safeMin;
        else if (newMin < safeMin) newMin = safeMin;
        else if (newMin > values[1]) newMin = values[1];
        setInputMin(String(newMin));
        setValues([
            newMin,
            values[1]
        ]);
        onChange(newMin, values[1]);
    }, [
        inputMin,
        safeMin,
        values,
        onChange
    ]);
    const handleInputMaxBlur = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)(()=>{
        let newMax = Number(inputMax);
        if (isNaN(newMax)) newMax = safeMax;
        else if (newMax > safeMax) newMax = safeMax;
        else if (newMax < values[0]) newMax = values[0];
        setInputMax(String(newMax));
        setValues([
            values[0],
            newMax
        ]);
        onChange(values[0], newMax);
    }, [
        inputMax,
        safeMax,
        values,
        onChange
    ]);
    const handleKeyDown = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((e, isMin)=>{
        if ('Enter' === e.key) {
            if (isMin) handleInputMinBlur();
            else handleInputMaxBlur();
        }
    }, [
        handleInputMinBlur,
        handleInputMaxBlur
    ]);
    const handleMinKeyDown = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((e)=>{
        handleKeyDown(e, true);
    }, [
        handleKeyDown
    ]);
    const handleMaxKeyDown = (0, __WEBPACK_EXTERNAL_MODULE_react__.useCallback)((e)=>{
        handleKeyDown(e, false);
    }, [
        handleKeyDown
    ]);
    return {
        values,
        inputMin,
        inputMax,
        isFilterApplied,
        safeMin,
        safeMax,
        handleSliderChange,
        handleInputMinChange,
        handleInputMaxChange,
        handleInputMinBlur,
        handleInputMaxBlur,
        handleMinKeyDown,
        handleMaxKeyDown
    };
};
export { useSliderFilter };
