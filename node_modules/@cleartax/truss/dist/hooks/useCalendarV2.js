import * as __WEBPACK_EXTERNAL_MODULE_react__ from "react";
function useCalendarV2({ defaultMonth, enableYearSelector = true }) {
    const [view, setView] = __WEBPACK_EXTERNAL_MODULE_react__.useState('calendar');
    const [selectedMonth, setSelectedMonth] = __WEBPACK_EXTERNAL_MODULE_react__.useState(defaultMonth || new Date());
    const [yearRange, setYearRange] = __WEBPACK_EXTERNAL_MODULE_react__.useState(()=>{
        const currentYear = (defaultMonth || new Date()).getFullYear();
        const startYear = 12 * Math.floor(currentYear / 12);
        return [
            startYear,
            startYear + 11
        ];
    });
    const handleCaptionClick = __WEBPACK_EXTERNAL_MODULE_react__.useCallback(()=>{
        if (enableYearSelector) setView('month');
    }, [
        enableYearSelector
    ]);
    const handleYearClick = __WEBPACK_EXTERNAL_MODULE_react__.useCallback(()=>{
        if (enableYearSelector) setView('year');
    }, [
        enableYearSelector
    ]);
    const handleMonthSelect = __WEBPACK_EXTERNAL_MODULE_react__.useCallback((month)=>{
        const newDate = new Date(selectedMonth);
        newDate.setMonth(month);
        setSelectedMonth(newDate);
        setView('calendar');
    }, [
        selectedMonth
    ]);
    const handleYearSelect = __WEBPACK_EXTERNAL_MODULE_react__.useCallback((year)=>{
        const newDate = new Date(selectedMonth);
        newDate.setFullYear(year);
        setSelectedMonth(newDate);
        setView('month');
    }, [
        selectedMonth
    ]);
    const handlePreviousYearRange = __WEBPACK_EXTERNAL_MODULE_react__.useCallback(()=>{
        setYearRange(([start, end])=>[
                start - 12,
                end - 12
            ]);
    }, []);
    const handleNextYearRange = __WEBPACK_EXTERNAL_MODULE_react__.useCallback(()=>{
        setYearRange(([start, end])=>[
                start + 12,
                end + 12
            ]);
    }, []);
    const handlePreviousMonthClick = __WEBPACK_EXTERNAL_MODULE_react__.useCallback((displayMonth)=>{
        const newDate = new Date(displayMonth);
        newDate.setMonth(newDate.getMonth() - 1);
        setSelectedMonth(newDate);
    }, []);
    const handleNextMonthClick = __WEBPACK_EXTERNAL_MODULE_react__.useCallback((displayMonth)=>{
        const newDate = new Date(displayMonth);
        newDate.setMonth(newDate.getMonth() + 1);
        const currentDate = new Date();
        const currentYear = currentDate.getFullYear();
        const currentMonth = currentDate.getMonth();
        const newMonth = newDate.getMonth();
        const newYear = newDate.getFullYear();
        const isFutureMonth = newYear > currentYear || newYear === currentYear && newMonth > currentMonth;
        if (!isFutureMonth) setSelectedMonth(newDate);
    }, []);
    __WEBPACK_EXTERNAL_MODULE_react__.useEffect(()=>{
        setView('calendar');
    }, [
        selectedMonth
    ]);
    return {
        view,
        setView,
        selectedMonth,
        setSelectedMonth,
        yearRange,
        handleCaptionClick,
        handleYearClick,
        handleMonthSelect,
        handleYearSelect,
        handlePreviousYearRange,
        handleNextYearRange,
        handlePreviousMonthClick,
        handleNextMonthClick
    };
}
export { useCalendarV2 };
