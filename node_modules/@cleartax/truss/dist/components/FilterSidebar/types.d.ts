import React from 'react';
export declare enum FilterTypes {
    SEARCH = "search",
    CHECKBOX = "checkbox",
    RANGE = "range",
    DATE_RANGE = "dateRange",
    MONTH_RANGE = "monthRange",
    DATE = "date",
    MONTH = "month",
    SEARCH_AND_SELECT = "searchnselect",
    RADIO = "radio"
}
export declare enum FilterVariants {
    SIDEBAR = "SIDEBAR",
    DROPDOWN = "DROPDOWN",
    DROPDOWN_INLINE = "DROPDOWN_INLINE"
}
export declare enum SideBarFilterVariants {
    APPLY_BUTTON = "APPLY_BUTTON",
    NO_APPLY_BUTTON = "NO_APPLY_BUTTON"
}
export declare enum DATE_FORMATS {
    ISO = "ISO",
    MMYYYY = "MMYYYY",
    YYYYMMDD = "YYYY-MM-DD",
    DDMMYY = "DD/MM/YY",
    DDMMYYYY = "DD-MMM-YYYY"
}
export interface SubCategoryType {
    identifier: string;
    label: string;
}
export type SubCategoriesList = Array<SubCategoryType>;
export interface BaseFilterConfigType {
    disabled: boolean;
}
export interface CheckboxOptionsType {
    label: string;
    value: string;
    checked?: boolean;
    children?: CheckboxOptionsListType;
    subLabel?: string;
}
export type CheckboxOptionsListType = Array<CheckboxOptionsType>;
export interface NumberRangeSliderFilterType extends BaseFilterConfigType {
    minVal: number;
    maxVal: number;
}
export interface DateRangeFilterType extends BaseFilterConfigType {
    startDate: string;
    endDate: string;
    format: DATE_FORMATS;
    disableDates?: [string | undefined, string | undefined];
    maxDays?: number;
}
export type MonthRangeFilterType = DateRangeFilterType;
export interface DateFilterType extends BaseFilterConfigType {
    value: string;
    format: DATE_FORMATS;
    disableDates?: [string | undefined, string | undefined];
}
export type MonthFilterType = DateFilterType;
export interface SearchFilterConfigType extends BaseFilterConfigType {
    defaultValue: string;
}
export interface CheckboxConfigType extends BaseFilterConfigType {
    options: CheckboxOptionsListType;
}
export type RadioOptionsListType = Array<CheckboxOptionsType>;
export interface RadioConfigType extends BaseFilterConfigType {
    options: RadioOptionsListType;
}
export interface SearchAndSelectProps {
    disabled?: boolean;
    options?: any[];
    defaultValue?: string;
    placeholder?: string;
    onChange?: (value: string) => void;
    onSearch?: (value: string) => void;
    onSelect?: (value: string) => void;
    value?: string;
}
export interface FilterConfigType {
    type: FilterTypes;
    label: string;
    defaultIdentifier: string;
    filterConfig: SearchFilterConfigType | CheckboxConfigType | DateRangeFilterType | RadioConfigType | NumberRangeSliderFilterType;
    clearable?: boolean;
    catagories?: SubCategoriesList;
    disabled?: boolean;
    classNames?: string;
    collapsable?: boolean;
    variant?: FilterVariants;
    filterApplied?: FilterObjectType;
    reconType?: string;
    dataId?: string;
    collapsed?: boolean;
    multiSearch?: boolean;
    isRadio?: boolean;
    registerType?: string;
    isNumber?: boolean;
    tooltip?: string;
    delimiters?: Array<DELIMITERS>;
    filterDescription?: React.ReactNode;
    order?: number;
}
export type FilterConfigListType = Array<FilterConfigType>;
export interface FilterObjectType {
    value?: string;
    source?: string;
    min?: number | string;
    max?: number | string;
    values?: Array<string>;
    filterType?: FilterTypes;
    format?: DATE_FORMATS;
    catagories?: SubCategoriesList;
}
export interface ActionValueType {
    identifier: string;
    source?: string;
    catagories?: SubCategoriesList;
    filterValue?: string;
    filterValueList?: Array<string>;
    min?: number;
    max?: number;
    startDate?: string;
    endDate?: string;
    filterType?: FilterTypes;
    format?: DATE_FORMATS;
    operationType?: string;
}
export declare enum FILTER_ACTIONS {
    REMOVE_FILTER = "REMOVE_FILTER",
    RESET_FILTER = "RESET_FILTER",
    APPLY_FILTER = "APPLY_FILTER",
    SHOW_APPLIED_FILTER = "SHOW_APPLIED_FILTER",
    SHOW_ALL_FILTER = "SHOW_ALL_FILTER",
    INITIALIZE_FILTER = "INITIALIZE_FILTER"
}
export declare enum SIDEBAR_FILTER_ACTIONS {
    SIDEBAR_SINGLE_APPLY_FILTER = "SIDEBAR_SINGLE_APPLY_FILTER",
    SIDEBAR_SINGLE_REMOVE_FILTER = "SIDEBAR_SINGLE_REMOVE_FILTER"
}
export interface FitlerStateActionType {
    type: FILTER_ACTIONS | SIDEBAR_FILTER_ACTIONS;
    value?: ActionValueType;
    initialState?: FilterStateType;
}
export interface FilterStateType {
    [identifier: string]: FilterObjectType;
}
export interface SidebarFooterProps {
    handleReset: () => void;
    handleApply: () => void;
}
export interface FilterSidebarProps {
    onClose: () => void;
    onApply: (filter: FilterStateType) => void;
    filterConfig: FilterConfigListType;
}
interface CheckboxOption {
    label: string;
    value: string;
}
export interface CheckboxFilterRendererProps {
    title: string;
    options: CheckboxOption[];
    selectedValues: string[];
    onChange: (values: string[]) => void;
    isCollapsed?: boolean;
    dataId?: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
}
export interface ColumnSearchRendererProps {
    value: string;
    onChange: (value: string) => void;
    placeholder?: string;
}
export interface DateFilterRendererProps {
    title: string;
    value: string;
    onChange: (value: string) => void;
    isCollapsed?: boolean;
    dataId?: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
}
export interface MonthRangeFilterRendererProps {
    title: string;
    min: string;
    max: string;
    onChange: (min: string, max: string) => void;
    isCollapsed?: boolean;
    dataId?: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
}
interface RadioOption {
    label: string;
    value: string;
}
export interface RadioFilterRendererProps {
    title: string;
    options: RadioOption[];
    selectedValue: string;
    onChange: (value: string) => void;
    isCollapsed?: boolean;
    dataId?: string;
    name: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
}
export interface SearchRendererProps {
    title: string;
    value: string;
    onChange: (value: string) => void;
    placeholder?: string;
    isCollapsed?: boolean;
    dataId?: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
}
export interface SliderFilterRendererProps {
    title: string;
    min: number;
    max: number;
    minVal: number;
    maxVal: number;
    onChange: (min: number, max: number) => void;
    isCollapsed?: boolean;
    dataId?: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
}
export interface DateRangePickerProps {
    startDate?: Date;
    endDate?: Date;
    onStartDateChange: (date: Date | undefined) => void;
    onEndDateChange: (date: Date | undefined) => void;
    activeInput: 'start' | 'end' | null;
    onActiveInputChange: (input: 'start' | 'end' | null) => void;
    disabled?: (date: Date) => boolean;
    className?: string;
}
export interface FilterSectionProps {
    title: string;
    isCollapsed?: boolean;
    children: React.ReactNode;
    dataId?: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
    hasSubFilter?: boolean;
}
export interface FilterListRendererPropTypes {
    buttonVariant?: 'filled-primary' | 'outlined-primary';
    controlled?: boolean;
    config: FilterConfigListType;
    variant?: string;
    className?: string;
    handleApply?: (filterState: FilterStateType) => void;
    dropdownText?: string;
    filterApplied?: FilterStateType;
    visibility?: string;
}
export interface YearSelectorProps {
    selectedMonth: Date;
    yearRange: [number, number];
    onYearSelect: (year: number) => void;
    onPreviousYearRange: () => void;
    onNextYearRange: () => void;
    style?: React.CSSProperties;
}
export interface MonthRangePickerProps {
    fromDate: Date | undefined;
    toDate: Date | null | undefined;
    onFromDateChange: (date: Date | undefined) => void;
    onToDateChange: (date: Date | null | undefined) => void;
    activeInput: 'from' | 'to' | null;
    onActiveInputChange: (input: 'from' | 'to' | null) => void;
    className?: string;
}
export declare enum DELIMITERS {
    SPACE = " ",
    PIPE = "|"
}
export interface MonthSelectorProps {
    selectedMonth: Date;
    onMonthSelect: (month: number) => void;
    onYearClick: () => void;
    style?: React.CSSProperties;
    onSelectedMonthChange: (date: Date) => void;
}
export declare enum DrawerStates {
    Open = "OPEN",
    Closed = "CLOSED",
    Collapsed = "COLLAPSED"
}
export interface FilterStoreState {
    filterState: FilterStateType;
    appliedFilterState: FilterStateType;
    visibility: DrawerStates;
    showAppliedFilters: boolean;
    variant: SideBarFilterVariants | null;
    initialState: FilterStateType;
}
export interface FilterStoreActions {
    initialize: (initialState: FilterStateType, variant: SideBarFilterVariants) => void;
    applyFilter: (value: ActionValueType) => void;
    removeFilter: (value: ActionValueType) => void;
    resetFilters: () => void;
    applyPendingFilters: () => void;
    openFilterSidebar: () => void;
    closeFilterSidebar: () => void;
    toggleShowAppliedFilters: () => void;
}
export interface MonthFilterRendererProps {
    title: string;
    value: string;
    onChange: (value: string) => void;
    isCollapsed?: boolean;
    dataId?: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
}
export type SelectorType = 'month' | 'year';
export interface DateRangeFilterRendererProps {
    title: string;
    min: string;
    max: string;
    onChange: (min: string, max: string) => void;
    isCollapsed?: boolean;
    dataId?: string;
    identifier?: string;
    onToggle?: (isCollapsed: boolean) => void;
}
export {};
